!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nidionis/push_swap/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	libft/Makefile	/^$(NAME): $(OBJS)$/;"	t
$(OBJ_DIR)	libft/Makefile	/^$(OBJ_DIR):$/;"	t
$(OBJ_DIR)/%.o	libft/Makefile	/^$(OBJ_DIR)\/%.o: $(SRC_DIR)\/%.c | $(OBJ_DIR)$/;"	t
${NAME}	Makefile	/^${NAME}:  make_libft$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
0	.vscode/launch.json	/^        "args": [""],$/;"	s	array:configurations.0.args
0	.vscode/launch.json	/^    {$/;"	o	array:configurations
0	.vscode/tasks.json	/^                "$gcc"$/;"	s	array:tasks.0.problemMatcher
0	.vscode/tasks.json	/^                "-fdiagnostics-color=always",$/;"	s	array:tasks.0.args
0	.vscode/tasks.json	/^        {$/;"	o	array:tasks
1	.vscode/tasks.json	/^                "-g",$/;"	s	array:tasks.0.args
2	.vscode/tasks.json	/^                "${file}",$/;"	s	array:tasks.0.args
3	.vscode/tasks.json	/^                "-o",$/;"	s	array:tasks.0.args
4	.vscode/tasks.json	/^                "${fileDirname}\/${fileBasenameNoExtension}"$/;"	s	array:tasks.0.args
BONUS_MAIN	Makefile	/^BONUS_MAIN = checker.c$/;"	m
BONUS_NAME	Makefile	/^BONUS_NAME = checker$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -Iinclude$/;"	m
DEBUG_NAME	Makefile	/^DEBUG_NAME = a.out$/;"	m
FILES	libft/Makefile	/^FILES = ft_atoi.c ft_bzero.c ft_calloc.c ft_errmsg.c ft_isalnum.c ft_isalpha.c \\$/;"	m
FIRST_INSTR	include/push_swap.h	/^#define FIRST_INSTR /;"	d
HEADERS	Makefile	/^HEADERS = -I.\/include -I.\/libft\/include$/;"	m
INCLUDES	Makefile	/^INCLUDES = $(HEADERS) -L.\/$(LIBFT_DIR) -L include $(LIBS) -I.\/$(LIBFT_DIR)$/;"	m
INCLUDE_DIR	libft/Makefile	/^INCLUDE_DIR = include$/;"	m
INSTR_MAX	include/push_swap.h	/^	INSTR_MAX = ss$/;"	e	enum:e_instr
INSTR_MIN	include/push_swap.h	/^	INSTR_MIN = 1,$/;"	e	enum:e_instr
INT_MAX	libft/include/libft.h	/^# define INT_MAX /;"	d
INT_MIN	libft/include/libft.h	/^# define INT_MIN /;"	d
ISSPACE	include/push_swap.h	/^#define ISSPACE /;"	d
LIBFT_AR	Makefile	/^LIBFT_AR = libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR = libft\/$/;"	m
LIBFT_H	libft/include/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS = $(LIBFT_DIR)$(LIBFT_AR)$/;"	m
MIMode	.vscode/launch.json	/^        "MIMode": "lldb"$/;"	s	object:configurations.0
MODULO_GIVING_REVERSE_ROTATE_INSTRUCTIONS	include/push_swap.h	/^#define MODULO_GIVING_REVERSE_ROTATE_INSTRUCTIONS /;"	d
MODULO_GIVING_ROTATE_INSTRUCTIONS	include/push_swap.h	/^#define MODULO_GIVING_ROTATE_INSTRUCTIONS /;"	d
NAME	Makefile	/^NAME = push_swap$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NB_FIRST_INSTR	include/push_swap.h	/^#define NB_FIRST_INSTR /;"	d
NB_SECOND_INSTR	include/push_swap.h	/^#define NB_SECOND_INSTR /;"	d
OBJS	Makefile	/^OBJS := ${SRCS:c=o}$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:$(SRC_DIR)\/%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR = obj$/;"	m
PRINT	include/push_swap.h	/^#define PRINT /;"	d
PUSH_SWAP_H	include/push_swap.h	/^# define PUSH_SWAP_H$/;"	d
REVERSE_ROTATE	include/push_swap.h	/^#define REVERSE_ROTATE /;"	d
ROTATE	include/push_swap.h	/^#define ROTATE /;"	d
SECOND_INSTR	include/push_swap.h	/^#define SECOND_INSTR /;"	d
SRCS	Makefile	/^SRCS = *.c$/;"	m
SRCS	libft/Makefile	/^SRCS = $(addprefix $(SRC_DIR)\/, $(FILES))$/;"	m
SRC_DIR	libft/Makefile	/^SRC_DIR = src$/;"	m
all	Makefile	/^all: ${NAME}$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
append_line	libft/src/ft_split.c	/^static size_t	append_line(char *str, char sep, char **ret, size_t i_wd)$/;"	f	typeref:typename:size_t	file:
apply_instr	apply_instr.c	/^void	apply_instr(int instr, t_lnk **lst_a, t_lnk **lst_b, int to_print)$/;"	f	typeref:typename:void
args	.vscode/launch.json	/^        "args": [""],$/;"	a	object:configurations.0
args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.0
b_dump	b_dump.c	/^void	b_dump(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
best_insert	b_dump.c	/^int	*best_insert(t_lnk *lst_a, t_lnk *lst_b, int *best_comb)$/;"	f	typeref:typename:int *
bonus	Makefile	/^bonus:  make_libft$/;"	t
bonusdebugfile	Makefile	/^bonusdebugfile: ctags$/;"	t
c_to_i	main.c	/^int c_to_i(char c)$/;"	f	typeref:typename:int
can_push	algobsolete.c	/^int	can_push(t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
clean_exit	get_args.c	/^void	clean_exit(t_lnk *lst_a, char **splited)$/;"	f	typeref:typename:void
command	.vscode/tasks.json	/^            "command": "\/usr\/bin\/gcc",$/;"	s	object:tasks.0
configurations	.vscode/launch.json	/^    "configurations": [$/;"	a
content	libft/include/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
ctags	Makefile	/^ctags:$/;"	t
cwd	.vscode/launch.json	/^        "cwd": "${fileDirname}",$/;"	s	object:configurations.0
cwd	.vscode/tasks.json	/^                "cwd": "${fileDirname}"$/;"	s	object:tasks.0.options
debug	Makefile	/^debug: debugfile$/;"	t
debugfile	Makefile	/^debugfile: ctags$/;"	t
del_lst	lnk_fts.c	/^void	del_lst(t_lnk **lst)$/;"	f	typeref:typename:void
detail	.vscode/tasks.json	/^            "detail": "Task generated by Debugger."$/;"	s	object:tasks.0
e_instr	include/push_swap.h	/^enum	e_instr$/;"	g
environment	.vscode/launch.json	/^        "environment": [],$/;"	a	object:configurations.0
externalConsole	.vscode/launch.json	/^        "externalConsole": false,$/;"	b	object:configurations.0
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
ft_atoi	libft/src/ft_atoi.c	/^int	ft_atoi(const char *str0)$/;"	f	typeref:typename:int
ft_atoi_err	main.c	/^long int       ft_atoi_err(char *str)$/;"	f	typeref:typename:long int
ft_bzero	libft/src/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void *
ft_calloc	libft/src/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_errmsg	libft/src/ft_errmsg.c	/^void	ft_errmsg(char *str)$/;"	f	typeref:typename:void
ft_free_split	libft/src/ft_split.c	/^void	ft_free_split(char ***t)$/;"	f	typeref:typename:void
ft_intlen	libft/src/ft_itoa.c	/^static size_t	ft_intlen(long int n)$/;"	f	typeref:typename:size_t	file:
ft_isalnum	libft/src/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/src/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/src/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/src/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_ismaj	libft/src/ft_isalpha.c	/^int	ft_ismaj(int c)$/;"	f	typeref:typename:int
ft_ismin	libft/src/ft_isalpha.c	/^int	ft_ismin(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/src/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	main.c	/^int ft_isspace(char c)$/;"	f	typeref:typename:int
ft_itoa	libft/src/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/src/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/src/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/src/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/src/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/src/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/src/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/src/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void*), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/src/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/src/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/src/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/src/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/src/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memmove	libft/src/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memrcpy	libft/src/ft_memmove.c	/^static void	ft_memrcpy(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void	file:
ft_memset	libft/src/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_new_lnk	lnk_fts.c	/^t_lnk	*ft_new_lnk(long int nb, int ind, int rank)$/;"	f	typeref:typename:t_lnk *
ft_no_duplicate	verifications.c	/^int	ft_no_duplicate(t_lnk *lst)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/src/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/src/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putibase_fd	libft/src/ft_printf.c	/^static size_t	ft_putibase_fd(long long int n, char *base, size_t base_len, int fd)$/;"	f	typeref:typename:size_t	file:
ft_putnbr_fd	libft/src/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putptr	libft/src/ft_printf.c	/^static size_t	ft_putptr(unsigned long ptr, int fd)$/;"	f	typeref:typename:size_t	file:
ft_putstr_fd	libft/src/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_realloc_cat	get_next_line.c	/^char	*ft_realloc_cat(char *line, char c, int *len)$/;"	f	typeref:typename:char *
ft_split	libft/src/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/src/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/src/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f	typeref:typename:char *
ft_striteri	libft/src/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	libft/src/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/src/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/src/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlen	libft/src/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/src/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/src/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnlen	libft/src/ft_strlcat.c	/^static size_t	ft_strnlen(char *s, size_t max)$/;"	f	typeref:typename:size_t	file:
ft_strnstr	libft/src/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *ndl, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/src/ft_strrchr.c	/^char	*ft_strrchr(char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/src/ft_strtrim.c	/^char	*ft_strtrim(char const *str, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/src/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/src/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/src/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_wd_count	libft/src/ft_split.c	/^int	ft_wd_count(char *str, char sep)$/;"	f	typeref:typename:int
fucking_normi_2	apply_instr.c	/^int	fucking_normi_2(char *str)$/;"	f	typeref:typename:int
fucking_norminette	apply_instr.c	/^void	fucking_norminette(int instr, t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
get_args	get_args.c	/^t_lnk	*get_args(int argc, char *argv[])$/;"	f	typeref:typename:t_lnk *
get_args_allinone	get_args.c	/^t_lnk	*get_args_allinone(char *str)$/;"	f	typeref:typename:t_lnk *
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_shortestway	reach.c	/^int	get_shortestway(int rank, t_lnk *lst)$/;"	f	typeref:typename:int
group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.0
i_to_instr	apply_instr.c	/^void	i_to_instr(int i)$/;"	f	typeref:typename:void
ind	include/push_swap.h	/^	int				ind;$/;"	m	struct:s_lnk	typeref:typename:int
init_best_comb	b_dump.c	/^void	init_best_comb(int *best_comb, int *itm_insert_result, t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:void
instr_to_i	apply_instr.c	/^int	instr_to_i(char *str)$/;"	f	typeref:typename:int
isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.0.group
is_median	small_lst.c	/^int	is_median(t_lnk *lst_a, int max)$/;"	f	typeref:typename:int
is_sorted	verifications.c	/^int	is_sorted(t_lnk *lst)$/;"	f	typeref:typename:int
itm_insert	algobsolete.c	/^int	*itm_insert(t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:int *
itm_insert_loop	algobsolete.c	/^void	itm_insert_loop(t_lnk *lst_a, t_lnk *lst_b, int instr, int *best_result)$/;"	f	typeref:typename:void
kind	.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.0.group
label	.vscode/tasks.json	/^            "label": "C\/C++: gcc build active file",$/;"	s	object:tasks.0
lnk_init	lnk_fts.c	/^t_lnk	*lnk_init(t_lnk *lnk)$/;"	f	typeref:typename:t_lnk *
load_b	smart_load.c	/^void	load_b(t_lnk **lst_a, t_lnk **lst_b, int max)$/;"	f	typeref:typename:void
loop	lnk_fts.c	/^void	loop(t_lnk *lnk, t_lnk *l_i, int *max)$/;"	f	typeref:typename:void
loop_norminette	libft/src/ft_printf_utils.c	/^void	loop_norminette(char **str_addr, va_list ap, int *p_itm, int *ret_val)$/;"	f	typeref:typename:void
lst_init_ranks	lnk_fts.c	/^int	lst_init_ranks(t_lnk **lst)$/;"	f	typeref:typename:int
main	main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
make_libft	Makefile	/^make_libft:$/;"	t
make_str	libft/src/ft_itoa.c	/^static void	make_str(long int *n, char *str, int len)$/;"	f	typeref:typename:void	file:
make_tab	libft/src/ft_split.c	/^static char	**make_tab(char **ret, char const *s, char sep, unsigned int nb_wd)$/;"	f	typeref:typename:char **	file:
malloc_len	libft/src/ft_substr.c	/^size_t	malloc_len(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:size_t
name	.vscode/launch.json	/^        "name": "(lldb) Launch",$/;"	s	object:configurations.0
nb	include/push_swap.h	/^	int				nb;$/;"	m	struct:s_lnk	typeref:typename:int
nb_instruction	b_dump.c	/^int	nb_instruction(int **b, int INSTR)$/;"	f	typeref:typename:int
next	include/push_swap.h	/^	struct s_lnk	*next;$/;"	m	struct:s_lnk	typeref:struct:s_lnk *
next	libft/include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.0
pa	include/push_swap.h	/^	pa,$/;"	e	enum:e_instr
pb	include/push_swap.h	/^	pb,$/;"	e	enum:e_instr
pop_item	pushing_fts.c	/^t_lnk	*pop_item(t_lnk **lst)$/;"	f	typeref:typename:t_lnk *
prev	include/push_swap.h	/^	struct s_lnk	*prev;$/;"	m	struct:s_lnk	typeref:struct:s_lnk *
print_item	libft/src/ft_printf.c	/^static int	print_item(va_list ap, char c)$/;"	f	typeref:typename:int	file:
print_lst	print_lst.c	/^void	print_lst(t_lnk *lst, char *header)$/;"	f	typeref:typename:void
print_lst_byrank	print_lst.c	/^void	print_lst_byrank(t_lnk *lst, char *header)$/;"	f	typeref:typename:void
printf	libft/src/ft_printf.c	/^int	printf(const char *str, ...)$/;"	f	typeref:typename:int
problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [$/;"	a	object:tasks.0
program	.vscode/launch.json	/^        "program": "${workspaceFolder}\/a.out",$/;"	s	object:configurations.0
push	pushing_fts.c	/^void	push(t_lnk **from_lst, t_lnk **to_lst)$/;"	f	typeref:typename:void
push_item	pushing_fts.c	/^void	push_item(t_lnk *lnk, t_lnk **lst)$/;"	f	typeref:typename:void
push_swap.h	.vscode/settings.json	/^        "push_swap.h": "c"$/;"	s	object:files.associations
putubase	libft/src/ft_printf.c	/^static size_t	putubase(\\$/;"	f	typeref:typename:size_t	file:
ra	include/push_swap.h	/^	ra,$/;"	e	enum:e_instr
rank	include/push_swap.h	/^	int				rank;$/;"	m	struct:s_lnk	typeref:typename:int
rb	include/push_swap.h	/^	rb,$/;"	e	enum:e_instr
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
reach_and_push	reach.c	/^void	reach_and_push(t_lnk **lst, int rank, int direction)$/;"	f	typeref:typename:void
reach_rank	reach.c	/^void	reach_rank(t_lnk **lst, int rank, int direction)$/;"	f	typeref:typename:void
refresh_best_combs	algobsolete.c	/^int	refresh_best_combs(int *best_comb, int instr, int steps, \\$/;"	f	typeref:typename:int
refresh_in_dir	algobsolete.c	/^void	refresh_in_dir(t_lnk *lst_a, t_lnk *lst_b, int instr, \\$/;"	f	typeref:typename:void
request	.vscode/launch.json	/^        "request": "launch",$/;"	s	object:configurations.0
rotate_lst	rotate.c	/^void	rotate_lst(t_lnk **lst)$/;"	f	typeref:typename:void
rr	include/push_swap.h	/^	rr,$/;"	e	enum:e_instr
rra	include/push_swap.h	/^	rra,$/;"	e	enum:e_instr
rrb	include/push_swap.h	/^	rrb,$/;"	e	enum:e_instr
rrotate_lst	rotate.c	/^void	rrotate_lst(t_lnk **lst)$/;"	f	typeref:typename:void
rrr	include/push_swap.h	/^	rrr,$/;"	e	enum:e_instr
s_list	libft/include/libft.h	/^typedef struct s_list$/;"	s
s_lnk	include/push_swap.h	/^typedef struct s_lnk$/;"	s
sa	include/push_swap.h	/^	sa = INSTR_MIN,$/;"	e	enum:e_instr
sb	include/push_swap.h	/^	sb,$/;"	e	enum:e_instr
select_algo	main.c	/^void	select_algo(t_lnk *lst_a, t_lnk *lst_b, int ind_max)$/;"	f	typeref:typename:void
shortestway_fucking_norminette	reach.c	/^void	shortestway_fucking_norminette(t_lnk **lst, int *step_nb, \\$/;"	f	typeref:typename:void
sort_2_nb	small_lst.c	/^void	sort_2_nb(t_lnk **lst_a)$/;"	f	typeref:typename:void
sort_3_nb	small_lst.c	/^void	sort_3_nb(t_lnk **lst_a, int max)$/;"	f	typeref:typename:void
sort_4_nb	small_lst.c	/^void	sort_4_nb(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
sort_5_nb	small_lst.c	/^void	sort_5_nb(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
special_item	smart_load.c	/^int	special_item(t_lnk *lst_a, int max)$/;"	f	typeref:typename:int
ss	include/push_swap.h	/^	ss,$/;"	e	enum:e_instr
stopAtEntry	.vscode/launch.json	/^        "stopAtEntry": false,$/;"	b	object:configurations.0
swap_lst	swap.c	/^void	swap_lst(t_lnk **lst)$/;"	f	typeref:typename:void
t_list	libft/include/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_lnk	include/push_swap.h	/^}	t_lnk;$/;"	t	typeref:struct:s_lnk
tasks	.vscode/tasks.json	/^    "tasks": [$/;"	a
test	Makefile	/^test: ctags$/;"	t
type	.vscode/launch.json	/^        "type": "cppdbg",$/;"	s	object:configurations.0
type	.vscode/tasks.json	/^            "type": "cppbuild",$/;"	s	object:tasks.0
version	.vscode/tasks.json	/^    "version": "2.0.0"$/;"	s
