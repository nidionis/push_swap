!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nidionis/push_swap/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
${NAME}	Makefile	/^${NAME}:  make_libft$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
BONUS_MAIN	Makefile	/^BONUS_MAIN = checker.c$/;"	m
BONUS_NAME	Makefile	/^BONUS_NAME = checker$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
DEBUG_NAME	Makefile	/^DEBUG_NAME = a.out$/;"	m
HEADERS	Makefile	/^HEADERS = -I.\/include -I.\/libft\/include$/;"	m
INCLUDES	Makefile	/^INCLUDES = $(HEADERS) -L.\/$(LIBFT_DIR) -L include $(LIBS) -I.\/$(LIBFT_DIR)$/;"	m
LIBFT_AR	Makefile	/^LIBFT_AR = libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR = libft\/$/;"	m
LIBS	Makefile	/^LIBS = $(LIBFT_DIR)$(LIBFT_AR)$/;"	m
NAME	Makefile	/^NAME = push_swap$/;"	m
OBJS	Makefile	/^OBJS := ${SRCS:c=o}$/;"	m
SRCS	Makefile	/^SRCS = *.c$/;"	m
all	Makefile	/^all: ${NAME}$/;"	t
apply_instr	apply_instr.c	/^void	apply_instr(int instr, t_lnk **lst_a, t_lnk **lst_b, int to_print)$/;"	f	typeref:typename:void
b_dump	b_dump.c	/^void	b_dump(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
best_insert	b_dump.c	/^int	*best_insert(t_lnk *lst_a, t_lnk *lst_b, int *best_comb)$/;"	f	typeref:typename:int *
bonus	Makefile	/^bonus:  make_libft$/;"	t
bonusdebugfile	Makefile	/^bonusdebugfile: ctags$/;"	t
c_to_i	main.c	/^int c_to_i(char c)$/;"	f	typeref:typename:int
can_push	algobsolete.c	/^int	can_push(t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean_exit	get_args.c	/^void	clean_exit(t_lnk *lst_a, char **splited)$/;"	f	typeref:typename:void
ctags	Makefile	/^ctags:$/;"	t
debug	Makefile	/^debug: debugfile$/;"	t
debugfile	Makefile	/^debugfile: ctags$/;"	t
del_lst	lnk_fts.c	/^void	del_lst(t_lnk **lst)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
ft_atoi_err	main.c	/^long int       ft_atoi_err(char *str)$/;"	f	typeref:typename:long int
ft_isspace	main.c	/^int ft_isspace(char c)$/;"	f	typeref:typename:int
ft_new_lnk	lnk_fts.c	/^t_lnk	*ft_new_lnk(long int nb, int ind, int rank)$/;"	f	typeref:typename:t_lnk *
ft_no_duplicate	verifications.c	/^int	ft_no_duplicate(t_lnk *lst)$/;"	f	typeref:typename:int
ft_realloc_cat	get_next_line.c	/^char	*ft_realloc_cat(char *line, char c, int *len)$/;"	f	typeref:typename:char *
fucking_normi_2	apply_instr.c	/^int	fucking_normi_2(char *str)$/;"	f	typeref:typename:int
fucking_norminette	apply_instr.c	/^void	fucking_norminette(int instr, t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
get_args	get_args.c	/^t_lnk	*get_args(int argc, char *argv[])$/;"	f	typeref:typename:t_lnk *
get_args_allinone	get_args.c	/^t_lnk	*get_args_allinone(char *str)$/;"	f	typeref:typename:t_lnk *
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_shortestway	reach.c	/^int	get_shortestway(int rank, t_lnk *lst)$/;"	f	typeref:typename:int
i_to_instr	apply_instr.c	/^void	i_to_instr(int i)$/;"	f	typeref:typename:void
init_best_comb	b_dump.c	/^void	init_best_comb(int *best_comb, int *itm_insert_result, t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:void
instr_to_i	apply_instr.c	/^int	instr_to_i(char *str)$/;"	f	typeref:typename:int
is_median	small_lst.c	/^int	is_median(t_lnk *lst_a, int max)$/;"	f	typeref:typename:int
is_sorted	verifications.c	/^int	is_sorted(t_lnk *lst)$/;"	f	typeref:typename:int
itm_insert	algobsolete.c	/^int	*itm_insert(t_lnk *lst_a, t_lnk *lst_b)$/;"	f	typeref:typename:int *
itm_insert_loop	algobsolete.c	/^void	itm_insert_loop(t_lnk *lst_a, t_lnk *lst_b, int instr, int *best_result)$/;"	f	typeref:typename:void
lnk_init	lnk_fts.c	/^t_lnk	*lnk_init(t_lnk *lnk)$/;"	f	typeref:typename:t_lnk *
load_b	smart_load.c	/^void	load_b(t_lnk **lst_a, t_lnk **lst_b, int max)$/;"	f	typeref:typename:void
loop	lnk_fts.c	/^void	loop(t_lnk *lnk, t_lnk *l_i, int *max)$/;"	f	typeref:typename:void
lst_init_ranks	lnk_fts.c	/^int	lst_init_ranks(t_lnk **lst)$/;"	f	typeref:typename:int
main	main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
make_libft	Makefile	/^make_libft:$/;"	t
nb_instruction	b_dump.c	/^int	nb_instruction(int **b, int INSTR)$/;"	f	typeref:typename:int
pop_item	pushing_fts.c	/^t_lnk	*pop_item(t_lnk **lst)$/;"	f	typeref:typename:t_lnk *
print_lst	print_lst.c	/^void	print_lst(t_lnk *lst, char *header)$/;"	f	typeref:typename:void
print_lst_byrank	print_lst.c	/^void	print_lst_byrank(t_lnk *lst, char *header)$/;"	f	typeref:typename:void
push	pushing_fts.c	/^void	push(t_lnk **from_lst, t_lnk **to_lst)$/;"	f	typeref:typename:void
push_item	pushing_fts.c	/^void	push_item(t_lnk *lnk, t_lnk **lst)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean all$/;"	t
reach_and_push	reach.c	/^void	reach_and_push(t_lnk **lst, int rank, int direction)$/;"	f	typeref:typename:void
reach_rank	reach.c	/^void	reach_rank(t_lnk **lst, int rank, int direction)$/;"	f	typeref:typename:void
refresh_best_combs	algobsolete.c	/^int	refresh_best_combs(int *best_comb, int instr, int steps, \\$/;"	f	typeref:typename:int
refresh_in_dir	algobsolete.c	/^void	refresh_in_dir(t_lnk *lst_a, t_lnk *lst_b, int instr, \\$/;"	f	typeref:typename:void
rotate_lst	rotate.c	/^void	rotate_lst(t_lnk **lst)$/;"	f	typeref:typename:void
rrotate_lst	rotate.c	/^void	rrotate_lst(t_lnk **lst)$/;"	f	typeref:typename:void
select_algo	main.c	/^void	select_algo(t_lnk *lst_a, t_lnk *lst_b, int ind_max)$/;"	f	typeref:typename:void
shortestway_fucking_norminette	reach.c	/^void	shortestway_fucking_norminette(t_lnk **lst, int *step_nb, \\$/;"	f	typeref:typename:void
sort_2_nb	small_lst.c	/^void	sort_2_nb(t_lnk **lst_a)$/;"	f	typeref:typename:void
sort_3_nb	small_lst.c	/^void	sort_3_nb(t_lnk **lst_a, int max)$/;"	f	typeref:typename:void
sort_4_nb	small_lst.c	/^void	sort_4_nb(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
sort_5_nb	small_lst.c	/^void	sort_5_nb(t_lnk **lst_a, t_lnk **lst_b)$/;"	f	typeref:typename:void
special_item	smart_load.c	/^int	special_item(t_lnk *lst_a, int max)$/;"	f	typeref:typename:int
swap_lst	swap.c	/^void	swap_lst(t_lnk **lst)$/;"	f	typeref:typename:void
test	Makefile	/^test: ctags$/;"	t
